# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'store.py'
# DO NOT CHANGE! Change the original file instead.
from collections.abc import Sequence
from datetime import datetime
from typing import Any, overload

from key_value.shared.utils.managed_entry import ManagedEntry
from key_value.shared.utils.sanitize import ALPHANUMERIC_CHARACTERS, sanitize_string
from typing_extensions import Self, override

from key_value.sync.code_gen.stores.base import (
    BaseContextManagerStore,
    BaseDestroyCollectionStore,
    BaseEnumerateCollectionsStore,
    BaseStore,
)

try:
    from pymongo import MongoClient
    from pymongo.collection import Collection
    from pymongo.database import Database
    from pymongo.results import DeleteResult  # noqa: TC002
except ImportError as e:
    msg = "MongoDBStore requires py-key-value-aio[mongodb]"
    raise ImportError(msg) from e

DEFAULT_DB = "kv-store-adapter"
DEFAULT_COLLECTION = "kv"

DEFAULT_PAGE_SIZE = 10000
PAGE_LIMIT = 10000

# MongoDB collection name length limit
# https://www.mongodb.com/docs/manual/reference/limits/
# For unsharded collections and views, the namespace length limit is 255 bytes.
# For sharded collections, the namespace length limit is 235 bytes.
# So limit the collection name to 200 bytes
MAX_COLLECTION_LENGTH = 200
COLLECTION_ALLOWED_CHARACTERS = ALPHANUMERIC_CHARACTERS + "_"


def document_to_managed_entry(document: dict[str, Any]) -> ManagedEntry:
    """Convert a MongoDB document back to a ManagedEntry.

    This function deserializes a MongoDB document (created by `managed_entry_to_document`) back to a
    ManagedEntry object, parsing the stringified value field and preserving all metadata.

    Args:
        document: The MongoDB document to convert.

    Returns:
        A ManagedEntry object reconstructed from the document.
    """
    return ManagedEntry.from_dict(data=document, stringified_value=True)


def managed_entry_to_document(key: str, managed_entry: ManagedEntry) -> dict[str, Any]:
    """Convert a ManagedEntry to a MongoDB document for storage.

    This function serializes a ManagedEntry to a MongoDB document format, including the key and all
    metadata (TTL, creation, and expiration timestamps). The value is stringified to ensure proper
    storage in MongoDB. The serialization is designed to preserve all entry information for round-trip
    conversion back to a ManagedEntry.

    Args:
        key: The key associated with this entry.
        managed_entry: The ManagedEntry to serialize.

    Returns:
        A MongoDB document dict containing the key, value, and all metadata.
    """
    return {
        "key": key,
        **managed_entry.to_dict(include_metadata=True, include_expiration=True, include_creation=True, stringify_value=True),
    }


class MongoDBStore(BaseEnumerateCollectionsStore, BaseDestroyCollectionStore, BaseContextManagerStore, BaseStore):
    """MongoDB-based key-value store using Motor (sync MongoDB driver)."""

    _client: MongoClient[dict[str, Any]]
    _db: Database[dict[str, Any]]
    _collections_by_name: dict[str, Collection[dict[str, Any]]]

    @overload
    def __init__(
        self,
        *,
        client: MongoClient[dict[str, Any]],
        db_name: str | None = None,
        coll_name: str | None = None,
        default_collection: str | None = None,
    ) -> None:
        """Initialize the MongoDB store.

        Args:
            client: The MongoDB client to use.
            db_name: The name of the MongoDB database.
            coll_name: The name of the MongoDB collection.
            default_collection: The default collection to use if no collection is provided.
        """

    @overload
    def __init__(
        self, *, url: str, db_name: str | None = None, coll_name: str | None = None, default_collection: str | None = None
    ) -> None:
        """Initialize the MongoDB store.

        Args:
            url: The url of the MongoDB cluster.
            db_name: The name of the MongoDB database.
            coll_name: The name of the MongoDB collection.
            default_collection: The default collection to use if no collection is provided.
        """

    def __init__(
        self,
        *,
        client: MongoClient[dict[str, Any]] | None = None,
        url: str | None = None,
        db_name: str | None = None,
        coll_name: str | None = None,
        default_collection: str | None = None,
    ) -> None:
        """Initialize the MongoDB store."""

        if client:
            self._client = client
        elif url:
            self._client = MongoClient(url)
        else:
            # Defaults to localhost
            self._client = MongoClient()

        db_name = db_name or DEFAULT_DB
        coll_name = coll_name or DEFAULT_COLLECTION

        self._db = self._client[db_name]
        self._collections_by_name = {}

        super().__init__(default_collection=default_collection)

    @override
    def __enter__(self) -> Self:
        _ = self._client.__enter__()
        super().__enter__()
        return self

    @override
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:  # pyright: ignore[reportAny]
        super().__exit__(exc_type, exc_val, exc_tb)
        self._client.__exit__(exc_type, exc_val, exc_tb)

    def _sanitize_collection_name(self, collection: str) -> str:
        """Sanitize a collection name to meet MongoDB naming requirements.

        MongoDB has specific requirements for collection names (length limits, allowed characters).
        This method ensures collection names are compliant by truncating to the maximum allowed length
        and replacing invalid characters with safe alternatives.

        Args:
            collection: The collection name to sanitize.

        Returns:
            A sanitized collection name that meets MongoDB requirements.
        """
        return sanitize_string(value=collection, max_length=MAX_COLLECTION_LENGTH, allowed_characters=ALPHANUMERIC_CHARACTERS)

    @override
    def _setup_collection(self, *, collection: str) -> None:
        # Ensure index on the unique combo key and supporting queries
        collection = self._sanitize_collection_name(collection=collection)

        collection_filter: dict[str, str] = {"name": collection}
        matching_collections: list[str] = self._db.list_collection_names(filter=collection_filter)

        if matching_collections:
            self._collections_by_name[collection] = self._db[collection]
            return

        new_collection: Collection[dict[str, Any]] = self._db.create_collection(name=collection)

        _ = new_collection.create_index(keys="key")

        self._collections_by_name[collection] = new_collection

    @override
    def _get_managed_entry(self, *, key: str, collection: str) -> ManagedEntry | None:
        sanitized_collection = self._sanitize_collection_name(collection=collection)

        if doc := self._collections_by_name[sanitized_collection].find_one(filter={"key": key}):
            return ManagedEntry.from_dict(data=doc, stringified_value=True)

        return None

    @override
    def _get_managed_entries(self, *, collection: str, keys: Sequence[str]) -> list[ManagedEntry | None]:
        if not keys:
            return []

        sanitized_collection = self._sanitize_collection_name(collection=collection)

        # Use find with $in operator to get multiple documents at once
        cursor = self._collections_by_name[sanitized_collection].find(filter={"key": {"$in": keys}})

        managed_entries_by_key: dict[str, ManagedEntry | None] = dict.fromkeys(keys)

        for doc in cursor:
            if key := doc.get("key"):
                managed_entries_by_key[key] = document_to_managed_entry(document=doc)

        return [managed_entries_by_key[key] for key in keys]

    @override
    def _put_managed_entry(self, *, key: str, collection: str, managed_entry: ManagedEntry) -> None:
        mongo_doc: dict[str, Any] = managed_entry_to_document(key=key, managed_entry=managed_entry)

        sanitized_collection = self._sanitize_collection_name(collection=collection)

        _ = self._collections_by_name[sanitized_collection].update_one(filter={"key": key}, update={"$set": mongo_doc}, upsert=True)

    @override
    def _put_managed_entries(
        self,
        *,
        collection: str,
        keys: Sequence[str],
        managed_entries: Sequence[ManagedEntry],
        ttl: float | None,
        created_at: datetime,
        expires_at: datetime | None,
    ) -> None:
        if not keys:
            return

        sanitized_collection = self._sanitize_collection_name(collection=collection)

        # Use bulk_write for efficient batch operations
        from pymongo import UpdateOne

        operations: list[UpdateOne] = []
        for key, managed_entry in zip(keys, managed_entries, strict=True):
            mongo_doc: dict[str, Any] = managed_entry_to_document(key=key, managed_entry=managed_entry)

            operations.append(UpdateOne(filter={"key": key}, update={"$set": mongo_doc}, upsert=True))

        _ = self._collections_by_name[sanitized_collection].bulk_write(operations)  # pyright: ignore[reportUnknownMemberType]

    @override
    def _delete_managed_entry(self, *, key: str, collection: str) -> bool:
        sanitized_collection = self._sanitize_collection_name(collection=collection)

        result: DeleteResult = self._collections_by_name[sanitized_collection].delete_one(filter={"key": key})
        return bool(result.deleted_count)

    @override
    def _delete_managed_entries(self, *, keys: Sequence[str], collection: str) -> int:
        if not keys:
            return 0

        sanitized_collection = self._sanitize_collection_name(collection=collection)

        # Use delete_many with $in operator for efficient batch deletion
        result: DeleteResult = self._collections_by_name[sanitized_collection].delete_many(filter={"key": {"$in": keys}})

        return result.deleted_count

    @override
    def _get_collection_names(self, *, limit: int | None = None) -> list[str]:
        limit = min(limit or DEFAULT_PAGE_SIZE, PAGE_LIMIT)

        collections: list[str] = self._db.list_collection_names(filter={})

        return collections[:limit]

    @override
    def _delete_collection(self, *, collection: str) -> bool:
        sanitized_collection = self._sanitize_collection_name(collection=collection)

        _ = self._db.drop_collection(name_or_collection=sanitized_collection)
        if sanitized_collection in self._collections_by_name:
            del self._collections_by_name[sanitized_collection]
        return True

    @override
    def _close(self) -> None:
        self._client.close()
