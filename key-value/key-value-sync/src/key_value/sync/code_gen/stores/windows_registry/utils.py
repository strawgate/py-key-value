# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'utils.py'
# DO NOT CHANGE! Change the original file instead.
import contextlib
import winreg

from key_value.shared.errors.store import StoreSetupError

HiveType = int


def get_reg_sz_value(hive: HiveType, sub_key: str, value_name: str) -> str | None:
    """Retrieve a string value from the Windows Registry.

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path.
        value_name: The name of the registry value to retrieve.

    Returns:
        The string value, or None if the key or value doesn't exist.
    """
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key) as reg_key:
            (string, _) = winreg.QueryValueEx(reg_key, value_name)
            return string
    except (FileNotFoundError, OSError):
        return None


def set_reg_sz_value(hive: HiveType, sub_key: str, value_name: str, value: str) -> None:
    """Set a string value in the Windows Registry.

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path.
        value_name: The name of the registry value to set.
        value: The string value to write.

    Raises:
        StoreSetupError: If the registry key doesn't exist or the value couldn't be set.
    """
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE) as reg_key:
            winreg.SetValueEx(reg_key, value_name, 0, winreg.REG_SZ, value)
    except FileNotFoundError as e:
        msg = f"Registry key '{sub_key}' does not exist"
        raise StoreSetupError(msg) from e
    except OSError as e:
        msg = f"Failed to set registry value '{value_name}' at '{sub_key}'"
        raise StoreSetupError(msg) from e


def delete_reg_sz_value(hive: HiveType, sub_key: str, value_name: str) -> bool:
    """Delete a value from the Windows Registry.

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path.
        value_name: The name of the registry value to delete.

    Returns:
        True if the value was deleted, False if it didn't exist or couldn't be deleted.
    """
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE) as reg_key:
            winreg.DeleteValue(reg_key, value_name)
            return True
    except (FileNotFoundError, OSError):
        return False


def has_key(hive: HiveType, sub_key: str) -> bool:
    """Check if a registry key exists.

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path to check.

    Returns:
        True if the key exists, False otherwise.
    """
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key):
            return True
    except (FileNotFoundError, OSError):
        return False


def create_key(hive: HiveType, sub_key: str) -> None:
    """Create a new registry key.

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path to create.

    Raises:
        StoreSetupError: If the registry key couldn't be created.
    """
    try:
        winreg.CreateKey(hive, sub_key)
    except OSError as e:
        msg = f"Failed to create registry key '{sub_key}'"
        raise StoreSetupError(msg) from e


def delete_key(hive: HiveType, sub_key: str) -> bool:
    """Delete a registry key.

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path to delete.

    Returns:
        True if the key was deleted, False if it didn't exist or couldn't be deleted.
    """
    try:
        winreg.DeleteKey(hive, sub_key)
    except (FileNotFoundError, OSError):
        return False
    else:
        return True


def delete_sub_keys(hive: HiveType, sub_key: str) -> None:
    """Delete all immediate subkeys of a registry key.

    This function deletes all immediate child keys (non-recursive).

    Args:
        hive: The registry hive (e.g., winreg.HKEY_CURRENT_USER).
        sub_key: The registry subkey path whose subkeys should be deleted.
    """
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE | winreg.KEY_ENUMERATE_SUB_KEYS) as reg_key:
            while True:
                try:
                    # Always enumerate at index 0 since keys shift after deletion
                    next_child_key = winreg.EnumKey(reg_key, 0)
                except OSError:
                    # No more subkeys
                    break

                # Key already deleted or can't be deleted, skip it
                with contextlib.suppress(FileNotFoundError, OSError):
                    winreg.DeleteKey(reg_key, next_child_key)
    except (FileNotFoundError, OSError):
        return
