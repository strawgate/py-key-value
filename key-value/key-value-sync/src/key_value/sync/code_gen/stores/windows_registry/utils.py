# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'utils.py'
# DO NOT CHANGE! Change the original file instead.
import contextlib
import winreg
from collections.abc import Generator
from contextlib import contextmanager

HiveType = int


@contextmanager
def handle_winreg_error() -> Generator[None, None, None]:
    try:
        yield
    except (FileNotFoundError, OSError):
        return None


def get_reg_sz_value(hive: HiveType, sub_key: str, value_name: str) -> str | None:
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key) as reg_key:
            (string, _) = winreg.QueryValueEx(reg_key, value_name)
            return string
    except (FileNotFoundError, OSError):
        return None


def set_reg_sz_value(hive: HiveType, sub_key: str, value_name: str, value: str) -> None:
    with winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE) as reg_key:
        winreg.SetValueEx(reg_key, value_name, 0, winreg.REG_SZ, value)


def delete_reg_sz_value(hive: HiveType, sub_key: str, value_name: str) -> bool:
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE) as reg_key:
            winreg.DeleteValue(reg_key, value_name)
            return True
    except (FileNotFoundError, OSError):
        return False


def has_key(hive: HiveType, sub_key: str) -> bool:
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key):
            return True
    except (FileNotFoundError, OSError):
        return False


def create_key(hive: HiveType, sub_key: str) -> None:
    winreg.CreateKey(hive, sub_key)


def delete_key(hive: HiveType, sub_key: str) -> bool:
    try:
        with winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE) as reg_key:
            winreg.DeleteKey(reg_key, sub_key)
            return True
    except (FileNotFoundError, OSError):
        return False


def delete_sub_keys(hive: HiveType, sub_key: str) -> None:
    with (
        handle_winreg_error(),
        winreg.OpenKey(key=hive, sub_key=sub_key, access=winreg.KEY_WRITE | winreg.KEY_ENUMERATE_SUB_KEYS) as reg_key,
    ):
        index = 0
        while True:
            if not (next_child_key := winreg.EnumKey(reg_key, index)):
                break

            with contextlib.suppress(Exception):
                winreg.DeleteKey(reg_key, next_child_key)

            index += 1
