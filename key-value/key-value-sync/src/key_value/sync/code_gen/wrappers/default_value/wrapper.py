# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'wrapper.py'
# DO NOT CHANGE! Change the original file instead.
from collections.abc import Mapping, Sequence
from typing import Any

from typing_extensions import override

from key_value.sync.code_gen.protocols.key_value import KeyValue
from key_value.sync.code_gen.wrappers.base import BaseWrapper


class DefaultValueWrapper(BaseWrapper):
    """A wrapper that returns a default value when a key is not found.

    This wrapper provides dict.get(key, default) behavior for the key-value store,
    allowing you to specify a default value to return instead of None when a key doesn't exist.
    """

    _key_value: KeyValue
    key_value: KeyValue  # Alias for BaseWrapper compatibility

    def __init__(self, key_value: KeyValue, default_value: Mapping[str, Any], default_ttl: float | None = None) -> None:
        """Initialize the DefaultValueWrapper.

        Args:
            key_value: The underlying key-value store to wrap.
            default_value: The default value to return when a key is not found.
            default_ttl: The TTL to return for default values. Defaults to None.
        """
        self._key_value = key_value
        self.key_value = key_value  # Alias for BaseWrapper compatibility
        self._default_value = default_value
        self._default_ttl = default_ttl

    @override
    def get(self, key: str, *, collection: str | None = None) -> dict[str, Any] | None:
        """Get a value by key, returning the default value if not found.

        Args:
            key: The key to retrieve.
            collection: The collection to use.

        Returns:
            The value associated with the key, or the default value if not found.
        """
        result = self._key_value.get(key=key, collection=collection)
        return result if result is not None else dict(self._default_value)

    @override
    def get_many(self, keys: Sequence[str], *, collection: str | None = None) -> list[dict[str, Any] | None]:
        """Get multiple values by keys, returning the default value for missing keys.

        Args:
            keys: The keys to retrieve.
            collection: The collection to use.

        Returns:
            A list of values, with default values for missing keys.
        """
        results = self._key_value.get_many(keys=keys, collection=collection)
        return [result if result is not None else dict(self._default_value) for result in results]

    @override
    def ttl(self, key: str, *, collection: str | None = None) -> tuple[dict[str, Any] | None, float | None]:
        """Get a value and its TTL, returning the default value if not found.

        Args:
            key: The key to retrieve.
            collection: The collection to use.

        Returns:
            A tuple of (value, ttl), with default value and default TTL if not found.
        """
        (result, ttl_value) = self._key_value.ttl(key=key, collection=collection)
        if result is None:
            return (dict(self._default_value), self._default_ttl)
        return (result, ttl_value)

    @override
    def ttl_many(self, keys: Sequence[str], *, collection: str | None = None) -> list[tuple[dict[str, Any] | None, float | None]]:
        """Get multiple values with TTLs, returning the default value for missing keys.

        Args:
            keys: The keys to retrieve.
            collection: The collection to use.

        Returns:
            A list of (value, ttl) tuples, with default values and default TTL for missing keys.
        """
        results = self._key_value.ttl_many(keys=keys, collection=collection)
        return [
            (result, ttl_value) if result is not None else (dict(self._default_value), self._default_ttl) for (result, ttl_value) in results
        ]
