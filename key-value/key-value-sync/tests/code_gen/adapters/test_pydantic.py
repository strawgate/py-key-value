# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'test_pydantic.py'
# DO NOT CHANGE! Change the original file instead.
from datetime import datetime, timezone

import pytest
from inline_snapshot import snapshot
from key_value.shared.errors import DeserializationError
from pydantic import AnyHttpUrl, BaseModel

from key_value.sync.code_gen.adapters.pydantic import PydanticAdapter
from key_value.sync.code_gen.stores.memory.store import MemoryStore


class User(BaseModel):
    name: str
    age: int
    email: str


class UpdatedUser(User):
    is_admin: bool


class Product(BaseModel):
    name: str
    price: float
    quantity: int
    url: AnyHttpUrl


class Order(BaseModel):
    created_at: datetime
    updated_at: datetime
    user: User
    product: Product
    paid: bool


FIXED_CREATED_AT: datetime = datetime(year=2021, month=1, day=1, hour=12, minute=0, second=0, tzinfo=timezone.utc)
FIXED_UPDATED_AT: datetime = datetime(year=2021, month=1, day=1, hour=15, minute=0, second=0, tzinfo=timezone.utc)

SAMPLE_USER: User = User(name="John Doe", email="john.doe@example.com", age=30)
SAMPLE_PRODUCT: Product = Product(name="Widget", price=29.99, quantity=10, url=AnyHttpUrl(url="https://example.com"))
SAMPLE_ORDER: Order = Order(created_at=datetime.now(), updated_at=datetime.now(), user=SAMPLE_USER, product=SAMPLE_PRODUCT, paid=False)

TEST_COLLECTION: str = "test_collection"
TEST_KEY: str = "test_key"


class TestPydanticAdapter:
    @pytest.fixture
    def store(self) -> MemoryStore:
        return MemoryStore()

    @pytest.fixture
    def user_adapter(self, store: MemoryStore) -> PydanticAdapter[User]:
        return PydanticAdapter[User](key_value=store, pydantic_model=User)

    @pytest.fixture
    def updated_user_adapter(self, store: MemoryStore) -> PydanticAdapter[UpdatedUser]:
        return PydanticAdapter[UpdatedUser](key_value=store, pydantic_model=UpdatedUser)

    @pytest.fixture
    def product_adapter(self, store: MemoryStore) -> PydanticAdapter[Product]:
        return PydanticAdapter[Product](key_value=store, pydantic_model=Product)

    @pytest.fixture
    def product_list_adapter(self, store: MemoryStore) -> PydanticAdapter[list[Product]]:
        return PydanticAdapter[list[Product]](key_value=store, pydantic_model=list[Product])

    @pytest.fixture
    def order_adapter(self, store: MemoryStore) -> PydanticAdapter[Order]:
        return PydanticAdapter[Order](key_value=store, pydantic_model=Order)

    def test_simple_adapter(self, user_adapter: PydanticAdapter[User]):
        user_adapter.put(collection=TEST_COLLECTION, key=TEST_KEY, value=SAMPLE_USER)
        cached_user: User | None = user_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert cached_user == SAMPLE_USER

        assert user_adapter.delete(collection=TEST_COLLECTION, key=TEST_KEY)

        cached_user = user_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert cached_user is None

    def test_simple_adapter_with_validation_error_ignore(
        self, user_adapter: PydanticAdapter[User], updated_user_adapter: PydanticAdapter[UpdatedUser]
    ):
        user_adapter.put(collection=TEST_COLLECTION, key=TEST_KEY, value=SAMPLE_USER)

        updated_user = updated_user_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert updated_user is None

    def test_simple_adapter_with_validation_error_raise(
        self, user_adapter: PydanticAdapter[User], updated_user_adapter: PydanticAdapter[UpdatedUser]
    ):
        user_adapter.put(collection=TEST_COLLECTION, key=TEST_KEY, value=SAMPLE_USER)
        updated_user_adapter._raise_on_validation_error = True  # pyright: ignore[reportPrivateUsage]
        with pytest.raises(DeserializationError):
            updated_user_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)

    def test_complex_adapter(self, order_adapter: PydanticAdapter[Order]):
        order_adapter.put(collection=TEST_COLLECTION, key=TEST_KEY, value=SAMPLE_ORDER, ttl=10)
        cached_order: Order | None = order_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert cached_order == SAMPLE_ORDER

        assert order_adapter.delete(collection=TEST_COLLECTION, key=TEST_KEY)
        cached_order = order_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert cached_order is None

    def test_complex_adapter_with_list(self, product_list_adapter: PydanticAdapter[list[Product]], store: MemoryStore):
        product_list_adapter.put(collection=TEST_COLLECTION, key=TEST_KEY, value=[SAMPLE_PRODUCT, SAMPLE_PRODUCT], ttl=10)
        cached_products: list[Product] | None = product_list_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert cached_products == [SAMPLE_PRODUCT, SAMPLE_PRODUCT]

        # We need to ensure our memory store doesnt hold an entry with an array
        raw_collection = store._cache.get(TEST_COLLECTION)  # pyright: ignore[reportPrivateUsage]
        assert raw_collection is not None

        raw_entry = raw_collection.get(TEST_KEY)
        assert raw_entry is not None
        assert isinstance(raw_entry.value, dict)
        assert raw_entry.value == snapshot(
            {
                "items": [
                    {"name": "Widget", "price": 29.99, "quantity": 10, "url": "https://example.com/"},
                    {"name": "Widget", "price": 29.99, "quantity": 10, "url": "https://example.com/"},
                ]
            }
        )

        assert product_list_adapter.delete(collection=TEST_COLLECTION, key=TEST_KEY)
        cached_products = product_list_adapter.get(collection=TEST_COLLECTION, key=TEST_KEY)
        assert cached_products is None
