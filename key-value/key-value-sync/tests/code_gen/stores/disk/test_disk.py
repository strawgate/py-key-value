# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'test_disk.py'
# DO NOT CHANGE! Change the original file instead.
import json
import tempfile
from collections.abc import Generator

import pytest
from dirty_equals import IsDatetime
from diskcache.core import Cache
from inline_snapshot import snapshot
from typing_extensions import override

from key_value.sync.code_gen.stores.disk import DiskStore
from tests.code_gen.stores.base import BaseStoreTests, ContextManagerStoreTestMixin

TEST_SIZE_LIMIT = 100 * 1024  # 100KB


class TestDiskStore(ContextManagerStoreTestMixin, BaseStoreTests):
    @pytest.fixture(scope="session")
    def disk_store(self) -> Generator[DiskStore, None, None]:
        with tempfile.TemporaryDirectory() as temp_dir:
            yield DiskStore(directory=temp_dir, max_size=TEST_SIZE_LIMIT)

    @override
    @pytest.fixture
    def store(self, disk_store: DiskStore) -> DiskStore:
        disk_store._cache.clear()  # pyright: ignore[reportPrivateUsage]

        return disk_store

    @pytest.fixture
    def disk_cache(self, disk_store: DiskStore) -> Cache:
        return disk_store._cache  # pyright: ignore[reportPrivateUsage]

    def test_value_stored(self, store: DiskStore, disk_cache: Cache):
        store.put(collection="test", key="test_key", value={"name": "Alice", "age": 30})

        value = disk_cache.get(key="test::test_key")
        value_as_dict = json.loads(value)
        assert value_as_dict == snapshot({"created_at": IsDatetime(iso_string=True), "value": {"age": 30, "name": "Alice"}})

        store.put(collection="test", key="test_key", value={"name": "Alice", "age": 30}, ttl=10)

        value = disk_cache.get(key="test::test_key")
        value_as_dict = json.loads(value)
        assert value_as_dict == snapshot(
            {"created_at": IsDatetime(iso_string=True), "value": {"age": 30, "name": "Alice"}, "expires_at": IsDatetime(iso_string=True)}
        )
