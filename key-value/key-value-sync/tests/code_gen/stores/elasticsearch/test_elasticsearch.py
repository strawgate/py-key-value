# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'test_elasticsearch.py'
# DO NOT CHANGE! Change the original file instead.
from collections.abc import Generator
from datetime import datetime, timedelta, timezone

import pytest
from dirty_equals import IsFloat
from elasticsearch import Elasticsearch
from inline_snapshot import snapshot
from key_value.shared.stores.wait import wait_for_true
from key_value.shared.utils.managed_entry import ManagedEntry
from typing_extensions import override

from key_value.sync.code_gen.stores.base import BaseStore
from key_value.sync.code_gen.stores.elasticsearch import ElasticsearchStore
from key_value.sync.code_gen.stores.elasticsearch.store import managed_entry_to_document, source_to_managed_entry
from tests.code_gen.conftest import docker_container, should_skip_docker_tests
from tests.code_gen.stores.base import BaseStoreTests, ContextManagerStoreTestMixin

TEST_SIZE_LIMIT = 1 * 1024 * 1024  # 1MB
ES_HOST = "localhost"
ES_PORT = 9200
ES_URL = f"http://{ES_HOST}:{ES_PORT}"
ES_CONTAINER_PORT = 9200

WAIT_FOR_ELASTICSEARCH_TIMEOUT = 30
# Released Apr 2025
# Released Oct 2025
ELASTICSEARCH_VERSIONS_TO_TEST = ["9.0.0", "9.2.0"]


def get_elasticsearch_client() -> Elasticsearch:
    return Elasticsearch(hosts=[ES_URL])


def ping_elasticsearch() -> bool:
    es_client: Elasticsearch = get_elasticsearch_client()

    with es_client:
        return es_client.ping()


class ElasticsearchFailedToStartError(Exception):
    pass


def test_managed_entry_document_conversion():
    created_at = datetime(year=2025, month=1, day=1, hour=0, minute=0, second=0, tzinfo=timezone.utc)
    expires_at = created_at + timedelta(seconds=10)

    managed_entry = ManagedEntry(value={"test": "test"}, created_at=created_at, expires_at=expires_at)
    document = managed_entry_to_document(collection="test_collection", key="test_key", managed_entry=managed_entry)

    assert document == snapshot(
        {
            "collection": "test_collection",
            "key": "test_key",
            "value": '{"test": "test"}',
            "created_at": "2025-01-01T00:00:00+00:00",
            "expires_at": "2025-01-01T00:00:10+00:00",
        }
    )

    round_trip_managed_entry = source_to_managed_entry(source=document)

    assert round_trip_managed_entry.value == managed_entry.value
    assert round_trip_managed_entry.created_at == created_at
    assert round_trip_managed_entry.ttl == IsFloat(lt=0)
    assert round_trip_managed_entry.expires_at == expires_at


@pytest.mark.skipif(should_skip_docker_tests(), reason="Docker is not running")
class TestElasticsearchStore(ContextManagerStoreTestMixin, BaseStoreTests):
    @pytest.fixture(autouse=True, scope="session", params=ELASTICSEARCH_VERSIONS_TO_TEST)
    def setup_elasticsearch(self, request: pytest.FixtureRequest) -> Generator[None, None, None]:
        version = request.param
        es_image = f"docker.elastic.co/elasticsearch/elasticsearch:{version}"

        with docker_container(
            f"elasticsearch-test-{version}",
            es_image,
            {str(ES_CONTAINER_PORT): ES_PORT},
            {"discovery.type": "single-node", "xpack.security.enabled": "false"},
        ):
            if not wait_for_true(bool_fn=ping_elasticsearch, tries=WAIT_FOR_ELASTICSEARCH_TIMEOUT, wait_time=2):
                msg = f"Elasticsearch {version} failed to start"
                raise ElasticsearchFailedToStartError(msg)

            yield

    @pytest.fixture
    def es_client(self) -> Generator[Elasticsearch, None, None]:
        with Elasticsearch(hosts=[ES_URL]) as es_client:
            yield es_client

    @override
    @pytest.fixture
    def store(self) -> Generator[ElasticsearchStore, None, None]:
        with get_elasticsearch_client() as es_client:
            indices = es_client.options(ignore_status=404).indices.get(index="kv-store-e2e-test-*")
            for index in indices:
                _ = es_client.options(ignore_status=404).indices.delete(index=index)
        with ElasticsearchStore(url=ES_URL, index_prefix="kv-store-e2e-test") as store:
            yield store

    @pytest.mark.skip(reason="Distributed Caches are unbounded")
    @override
    def test_not_unbounded(self, store: BaseStore): ...

    @pytest.mark.skip(reason="Skip concurrent tests on distributed caches")
    @override
    def test_concurrent_operations(self, store: BaseStore): ...

    def test_put_put_two_indices(self, store: ElasticsearchStore, es_client: Elasticsearch):
        store.put(collection="test_collection", key="test_key", value={"test": "test"})
        store.put(collection="test_collection_2", key="test_key", value={"test": "test"})
        assert store.get(collection="test_collection", key="test_key") == {"test": "test"}
        assert store.get(collection="test_collection_2", key="test_key") == {"test": "test"}

        indices = es_client.options(ignore_status=404).indices.get(index="kv-store-e2e-test-*")
        assert len(indices.body) == 2
        assert "kv-store-e2e-test-test_collection" in indices
        assert "kv-store-e2e-test-test_collection_2" in indices
