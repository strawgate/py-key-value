# WARNING: this file is auto-generated by 'build_sync_library.py'
# from the original file 'test_keyring.py'
# DO NOT CHANGE! Change the original file instead.
from typing import Any

import pytest
from key_value.shared_test.cases import LARGE_TEST_DATA_ARGNAMES, LARGE_TEST_DATA_ARGVALUES, LARGE_TEST_DATA_IDS
from typing_extensions import override

from key_value.sync.code_gen.stores.base import BaseStore
from key_value.sync.code_gen.stores.keyring.store import KeyringStore
from tests.code_gen.conftest import detect_on_linux, detect_on_windows
from tests.code_gen.stores.base import BaseStoreTests


@pytest.mark.skipif(condition=detect_on_linux(), reason="KeyringStore is not available on Linux CI")
class TestKeychainStore(BaseStoreTests):
    @override
    @pytest.fixture
    def store(self) -> KeyringStore:
        # Use a test-specific service name to avoid conflicts
        store = KeyringStore(service_name="py-key-value-test")
        store.delete_many(collection="test", keys=["test"])
        store.delete_many(collection="test_collection", keys=["test_key"])

        return store

    @override
    @pytest.mark.skip(reason="We do not test boundedness of keyring stores")
    def test_not_unbounded(self, store: BaseStore): ...

    @override
    @pytest.mark.skipif(condition=detect_on_windows(), reason="Keyrings do not support large values on Windows")
    @pytest.mark.parametrize(argnames=LARGE_TEST_DATA_ARGNAMES, argvalues=LARGE_TEST_DATA_ARGVALUES, ids=LARGE_TEST_DATA_IDS)
    def test_get_large_put_get(self, store: BaseStore, data: dict[str, Any], json: str):
        store.put(collection="test", key="test", value=data)
        assert store.get(collection="test", key="test") == data
